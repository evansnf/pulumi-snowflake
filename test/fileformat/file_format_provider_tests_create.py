import unittest
from unittest.mock import Mock, call

from pulumi_snowflake.fileformat import FileFormatProvider


class FileFormatProviderTests(unittest.TestCase):

    def test_when_call_create_with_name_and_type_then_sql_is_generated(self):
        mock_cursor = Mock()
        mock_connection_provider = self.get_mock_connection_provider(mock_cursor)

        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)
        provider.create(self.get_standard_inputs())

        fullName = f"{self.get_standard_inputs()['database']}..{self.get_standard_inputs()['name']}"

        mock_cursor.execute.assert_has_calls([
            call("\n".join([
                f"CREATE FILE FORMAT {fullName}",
                f"TYPE = %s"
            ]), ("CSV",))
        ])

    def test_when_call_create_with_schema_then_executes_in_schema(self):
        mock_cursor = Mock()
        mock_connection_provider = self.get_mock_connection_provider(mock_cursor)

        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)
        provider.create({
            **self.get_standard_inputs(),
            "schema": "test_schema"
        })

        fullName = f"{self.get_standard_inputs()['database']}.test_schema.{self.get_standard_inputs()['name']}"

        mock_cursor.execute.assert_has_calls([
            call("\n".join([
                f"CREATE FILE FORMAT {fullName}",
                f"TYPE = %s"
            ]), ("CSV",))
        ])

    def test_when_call_create_with_name_and_type_then_outputs_are_returned(self):
        mock_cursor = Mock()
        mock_connection_provider = self.get_mock_connection_provider(mock_cursor)

        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)
        result = provider.create(self.get_standard_inputs())

        fullName = f"{self.get_standard_inputs()['database']}..{self.get_standard_inputs()['name']}"

        self.assertDictEqual(result.outs, {
            "comment": None,
            "name": self.get_standard_inputs()["name"],
            "full_name": fullName,
            "type": self.get_standard_inputs()["type"],
            "database": self.get_standard_inputs()["database"],
            "schema": None
        })
    
    def test_when_call_create_with_schema_then_appears_in_outputs(self):
        mock_cursor = Mock()
        mock_connection_provider = self.get_mock_connection_provider(mock_cursor)

        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)
        result = provider.create({
            **self.get_standard_inputs(),
            "schema": "test_schema",
        })

        fullName = f"{self.get_standard_inputs()['database']}.test_schema.{self.get_standard_inputs()['name']}"

        self.assertDictEqual(result.outs, {
            "name": self.get_standard_inputs()["name"],
            "full_name": fullName,
            "type": self.get_standard_inputs()["type"],
            "database": self.get_standard_inputs()["database"],
            "schema": "test_schema",
            "comment": None
        })


    def test_when_call_create_with_name_and_type_then_file_format_name_is_returned_as_id(self):
        mock_cursor = Mock()
        mock_connection_provider = self.get_mock_connection_provider(mock_cursor)

        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)
        result = provider.create(self.get_standard_inputs())

        self.assertEqual(result.id, self.get_standard_inputs()["name"])

    def test_when_call_create_without_name_then_name_is_autogenerated(self):
        mock_cursor = Mock()
        mock_connection_provider = self.get_mock_connection_provider(mock_cursor)

        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)
        result = provider.create({
            **self.get_standard_inputs(),
            'name': None,
        })

        fullName = f"{self.get_standard_inputs()['database']}..{result.outs['name']}"

        mock_cursor.execute.assert_has_calls([
            call("\n".join([
                f"CREATE FILE FORMAT {fullName}",
                f"TYPE = %s"
            ]), ("CSV",))
        ])

        resourceName = self.get_standard_inputs()["resource_name"]
        self.assertRegex(result.outs["name"], resourceName + '_[a-f,0-9]{7}')
        self.assertEqual(result.id, result.outs["name"])


    def test_when_give_invalid_db_then_error_thrown(self):
        mock_connection_provider = self.get_mock_connection_provider(Mock())
        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)

        self.assertRaises(Exception, provider.create, {
            **self.get_standard_inputs(),
            'database': 'invalid-db-name',
        })

    def test_when_give_invalid_schema_then_error_thrown(self):
        mock_connection_provider = self.get_mock_connection_provider(Mock())
        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)

        self.assertRaises(Exception, provider.create, {
            **self.get_standard_inputs(),
            'schema': 'invalid-schema-name',
        })

    def test_when_give_invalid_name_then_error_thrown(self):
        mock_connection_provider = self.get_mock_connection_provider(Mock())
        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)

        self.assertRaises(Exception, provider.create, {
            **self.get_standard_inputs(),
            'name': 'invalid-format',
        })

    def test_when_invalid_resource_name_given_and_name_is_autogenerated_then_error_thrown(self):
        mock_connection_provider = self.get_mock_connection_provider(Mock())
        provider = FileFormatProvider(self.get_mock_provider(), mock_connection_provider)

        self.assertRaises(Exception, provider.create, {
            **self.get_standard_inputs(),
            'name': None,
            'resource_name': 'invalid-name'
        })

    # HELPERS

    def get_standard_inputs(self):
        return {
            'database': 'test_database_name',
            'type': 'CSV',
            'resource_name': 'pulumi_test_file_format',
            'name': 'test_file_format'
        }

    def get_mock_connection_provider(self, mock_cursor):
        mockConnection = Mock()
        mockConnection.cursor.return_value = mock_cursor
        mock_connection_provider = Mock()
        mock_connection_provider.get.return_value = mockConnection
        return mock_connection_provider

    def get_mock_provider(self):
        mock_provider = Mock()
        mock_provider.database = None
        mock_provider.schema = None
        return mock_provider
